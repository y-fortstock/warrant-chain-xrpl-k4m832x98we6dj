// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: blockchain/token/v1/token_api.proto

package tokenv1

import (
	v1 "gitlab.com/warrant1/warrant/protobuf/blockchain/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateContractRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContractRequest) Reset() {
	*x = CreateContractRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractRequest) ProtoMessage() {}

func (x *CreateContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractRequest.ProtoReflect.Descriptor instead.
func (*CreateContractRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateContractRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateContractResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContractResponse) Reset() {
	*x = CreateContractResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractResponse) ProtoMessage() {}

func (x *CreateContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractResponse.ProtoReflect.Descriptor instead.
func (*CreateContractResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateContractResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateContractResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type EmissionRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash       string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	OwnerAddressId     string                 `protobuf:"bytes,2,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	WarehouseAddressId string                 `protobuf:"bytes,3,opt,name=warehouse_address_id,json=warehouseAddressId,proto3" json:"warehouse_address_id,omitempty"`
	WarehousePass      string                 `protobuf:"bytes,4,opt,name=warehouse_pass,json=warehousePass,proto3" json:"warehouse_pass,omitempty"`
	Signature          string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	OwnerPass          *string                `protobuf:"bytes,6,opt,name=owner_pass,json=ownerPass,proto3,oneof" json:"owner_pass,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EmissionRequest) Reset() {
	*x = EmissionRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmissionRequest) ProtoMessage() {}

func (x *EmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmissionRequest.ProtoReflect.Descriptor instead.
func (*EmissionRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{2}
}

func (x *EmissionRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *EmissionRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *EmissionRequest) GetWarehouseAddressId() string {
	if x != nil {
		return x.WarehouseAddressId
	}
	return ""
}

func (x *EmissionRequest) GetWarehousePass() string {
	if x != nil {
		return x.WarehousePass
	}
	return ""
}

func (x *EmissionRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *EmissionRequest) GetOwnerPass() string {
	if x != nil && x.OwnerPass != nil {
		return *x.OwnerPass
	}
	return ""
}

type EmissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmissionResponse) Reset() {
	*x = EmissionResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmissionResponse) ProtoMessage() {}

func (x *EmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmissionResponse.ProtoReflect.Descriptor instead.
func (*EmissionResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{3}
}

func (x *EmissionResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EmissionResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type TransferRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash      string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	ReceiverAddressId string                 `protobuf:"bytes,2,opt,name=receiver_address_id,json=receiverAddressId,proto3" json:"receiver_address_id,omitempty"`
	SenderAddressId   string                 `protobuf:"bytes,3,opt,name=sender_address_id,json=senderAddressId,proto3" json:"sender_address_id,omitempty"`
	SenderPass        string                 `protobuf:"bytes,4,opt,name=sender_pass,json=senderPass,proto3" json:"sender_pass,omitempty"`
	Signature         string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	ReceiverPass      *string                `protobuf:"bytes,6,opt,name=receiver_pass,json=receiverPass,proto3,oneof" json:"receiver_pass,omitempty"`
	TokenId           *string                `protobuf:"bytes,7,opt,name=token_id,json=tokenId,proto3,oneof" json:"token_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{4}
}

func (x *TransferRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *TransferRequest) GetReceiverAddressId() string {
	if x != nil {
		return x.ReceiverAddressId
	}
	return ""
}

func (x *TransferRequest) GetSenderAddressId() string {
	if x != nil {
		return x.SenderAddressId
	}
	return ""
}

func (x *TransferRequest) GetSenderPass() string {
	if x != nil {
		return x.SenderPass
	}
	return ""
}

func (x *TransferRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransferRequest) GetReceiverPass() string {
	if x != nil && x.ReceiverPass != nil {
		return *x.ReceiverPass
	}
	return ""
}

func (x *TransferRequest) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type TransferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{5}
}

func (x *TransferResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type TransferToCreditorRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash      string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	OwnerAddressId    string                 `protobuf:"bytes,2,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	OwnerAddressPass  string                 `protobuf:"bytes,3,opt,name=owner_address_pass,json=ownerAddressPass,proto3" json:"owner_address_pass,omitempty"`
	CreditorAddressId string                 `protobuf:"bytes,4,opt,name=creditor_address_id,json=creditorAddressId,proto3" json:"creditor_address_id,omitempty"`
	Signature         string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	CreditorPass      *string                `protobuf:"bytes,6,opt,name=creditor_pass,json=creditorPass,proto3,oneof" json:"creditor_pass,omitempty"`
	TokenId           *string                `protobuf:"bytes,7,opt,name=token_id,json=tokenId,proto3,oneof" json:"token_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TransferToCreditorRequest) Reset() {
	*x = TransferToCreditorRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferToCreditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToCreditorRequest) ProtoMessage() {}

func (x *TransferToCreditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToCreditorRequest.ProtoReflect.Descriptor instead.
func (*TransferToCreditorRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{6}
}

func (x *TransferToCreditorRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *TransferToCreditorRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *TransferToCreditorRequest) GetOwnerAddressPass() string {
	if x != nil {
		return x.OwnerAddressPass
	}
	return ""
}

func (x *TransferToCreditorRequest) GetCreditorAddressId() string {
	if x != nil {
		return x.CreditorAddressId
	}
	return ""
}

func (x *TransferToCreditorRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransferToCreditorRequest) GetCreditorPass() string {
	if x != nil && x.CreditorPass != nil {
		return *x.CreditorPass
	}
	return ""
}

func (x *TransferToCreditorRequest) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type TransferToCreditorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferToCreditorResponse) Reset() {
	*x = TransferToCreditorResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferToCreditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToCreditorResponse) ProtoMessage() {}

func (x *TransferToCreditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToCreditorResponse.ProtoReflect.Descriptor instead.
func (*TransferToCreditorResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{7}
}

func (x *TransferToCreditorResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferToCreditorResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type BuyoutFromCreditorRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash        string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	OwnerAddressId      string                 `protobuf:"bytes,2,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	CreditorAddressId   string                 `protobuf:"bytes,3,opt,name=creditor_address_id,json=creditorAddressId,proto3" json:"creditor_address_id,omitempty"`
	CreditorAddressPass string                 `protobuf:"bytes,4,opt,name=creditor_address_pass,json=creditorAddressPass,proto3" json:"creditor_address_pass,omitempty"`
	Signature           string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	OwnerPass           *string                `protobuf:"bytes,6,opt,name=owner_pass,json=ownerPass,proto3,oneof" json:"owner_pass,omitempty"`
	TokenId             *string                `protobuf:"bytes,7,opt,name=token_id,json=tokenId,proto3,oneof" json:"token_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BuyoutFromCreditorRequest) Reset() {
	*x = BuyoutFromCreditorRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyoutFromCreditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyoutFromCreditorRequest) ProtoMessage() {}

func (x *BuyoutFromCreditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyoutFromCreditorRequest.ProtoReflect.Descriptor instead.
func (*BuyoutFromCreditorRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{8}
}

func (x *BuyoutFromCreditorRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *BuyoutFromCreditorRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *BuyoutFromCreditorRequest) GetCreditorAddressId() string {
	if x != nil {
		return x.CreditorAddressId
	}
	return ""
}

func (x *BuyoutFromCreditorRequest) GetCreditorAddressPass() string {
	if x != nil {
		return x.CreditorAddressPass
	}
	return ""
}

func (x *BuyoutFromCreditorRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *BuyoutFromCreditorRequest) GetOwnerPass() string {
	if x != nil && x.OwnerPass != nil {
		return *x.OwnerPass
	}
	return ""
}

func (x *BuyoutFromCreditorRequest) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type BuyoutFromCreditorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuyoutFromCreditorResponse) Reset() {
	*x = BuyoutFromCreditorResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyoutFromCreditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyoutFromCreditorResponse) ProtoMessage() {}

func (x *BuyoutFromCreditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyoutFromCreditorResponse.ProtoReflect.Descriptor instead.
func (*BuyoutFromCreditorResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{9}
}

func (x *BuyoutFromCreditorResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BuyoutFromCreditorResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type TransferFromOwnerToWarehouseRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash     string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	OwnerAddressId   string                 `protobuf:"bytes,2,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	OwnerAddressPass string                 `protobuf:"bytes,3,opt,name=owner_address_pass,json=ownerAddressPass,proto3" json:"owner_address_pass,omitempty"`
	Signature        string                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	TokenId          *string                `protobuf:"bytes,5,opt,name=token_id,json=tokenId,proto3,oneof" json:"token_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransferFromOwnerToWarehouseRequest) Reset() {
	*x = TransferFromOwnerToWarehouseRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferFromOwnerToWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromOwnerToWarehouseRequest) ProtoMessage() {}

func (x *TransferFromOwnerToWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromOwnerToWarehouseRequest.ProtoReflect.Descriptor instead.
func (*TransferFromOwnerToWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{10}
}

func (x *TransferFromOwnerToWarehouseRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *TransferFromOwnerToWarehouseRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *TransferFromOwnerToWarehouseRequest) GetOwnerAddressPass() string {
	if x != nil {
		return x.OwnerAddressPass
	}
	return ""
}

func (x *TransferFromOwnerToWarehouseRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransferFromOwnerToWarehouseRequest) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type TransferFromOwnerToWarehouseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferFromOwnerToWarehouseResponse) Reset() {
	*x = TransferFromOwnerToWarehouseResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferFromOwnerToWarehouseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromOwnerToWarehouseResponse) ProtoMessage() {}

func (x *TransferFromOwnerToWarehouseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromOwnerToWarehouseResponse.ProtoReflect.Descriptor instead.
func (*TransferFromOwnerToWarehouseResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{11}
}

func (x *TransferFromOwnerToWarehouseResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferFromOwnerToWarehouseResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type TransferFromCreditorToWarehouseRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash        string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	CreditorAddressId   string                 `protobuf:"bytes,2,opt,name=creditor_address_id,json=creditorAddressId,proto3" json:"creditor_address_id,omitempty"`
	CreditorAddressPass string                 `protobuf:"bytes,3,opt,name=creditor_address_pass,json=creditorAddressPass,proto3" json:"creditor_address_pass,omitempty"`
	Signature           string                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	TokenId             *string                `protobuf:"bytes,5,opt,name=token_id,json=tokenId,proto3,oneof" json:"token_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TransferFromCreditorToWarehouseRequest) Reset() {
	*x = TransferFromCreditorToWarehouseRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferFromCreditorToWarehouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromCreditorToWarehouseRequest) ProtoMessage() {}

func (x *TransferFromCreditorToWarehouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromCreditorToWarehouseRequest.ProtoReflect.Descriptor instead.
func (*TransferFromCreditorToWarehouseRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{12}
}

func (x *TransferFromCreditorToWarehouseRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *TransferFromCreditorToWarehouseRequest) GetCreditorAddressId() string {
	if x != nil {
		return x.CreditorAddressId
	}
	return ""
}

func (x *TransferFromCreditorToWarehouseRequest) GetCreditorAddressPass() string {
	if x != nil {
		return x.CreditorAddressPass
	}
	return ""
}

func (x *TransferFromCreditorToWarehouseRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransferFromCreditorToWarehouseRequest) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type TransferFromCreditorToWarehouseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferFromCreditorToWarehouseResponse) Reset() {
	*x = TransferFromCreditorToWarehouseResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferFromCreditorToWarehouseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromCreditorToWarehouseResponse) ProtoMessage() {}

func (x *TransferFromCreditorToWarehouseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromCreditorToWarehouseResponse.ProtoReflect.Descriptor instead.
func (*TransferFromCreditorToWarehouseResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{13}
}

func (x *TransferFromCreditorToWarehouseResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferFromCreditorToWarehouseResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type InitiateReplacementRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash         string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	DocumentHashReplaced string                 `protobuf:"bytes,2,opt,name=document_hash_replaced,json=documentHashReplaced,proto3" json:"document_hash_replaced,omitempty"`
	OwnerAddressId       string                 `protobuf:"bytes,3,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	WarehouseAddressId   string                 `protobuf:"bytes,4,opt,name=warehouse_address_id,json=warehouseAddressId,proto3" json:"warehouse_address_id,omitempty"`
	WarehousePass        string                 `protobuf:"bytes,5,opt,name=warehouse_pass,json=warehousePass,proto3" json:"warehouse_pass,omitempty"`
	Signature            string                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InitiateReplacementRequest) Reset() {
	*x = InitiateReplacementRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateReplacementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateReplacementRequest) ProtoMessage() {}

func (x *InitiateReplacementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateReplacementRequest.ProtoReflect.Descriptor instead.
func (*InitiateReplacementRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{14}
}

func (x *InitiateReplacementRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *InitiateReplacementRequest) GetDocumentHashReplaced() string {
	if x != nil {
		return x.DocumentHashReplaced
	}
	return ""
}

func (x *InitiateReplacementRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *InitiateReplacementRequest) GetWarehouseAddressId() string {
	if x != nil {
		return x.WarehouseAddressId
	}
	return ""
}

func (x *InitiateReplacementRequest) GetWarehousePass() string {
	if x != nil {
		return x.WarehousePass
	}
	return ""
}

func (x *InitiateReplacementRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type InitiateReplacementResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateReplacementResponse) Reset() {
	*x = InitiateReplacementResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateReplacementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateReplacementResponse) ProtoMessage() {}

func (x *InitiateReplacementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateReplacementResponse.ProtoReflect.Descriptor instead.
func (*InitiateReplacementResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{15}
}

func (x *InitiateReplacementResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InitiateReplacementResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type PrepareToReplaceRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash         string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	DocumentHashReplaced string                 `protobuf:"bytes,2,opt,name=document_hash_replaced,json=documentHashReplaced,proto3" json:"document_hash_replaced,omitempty"`
	OwnerAddressId       string                 `protobuf:"bytes,3,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	CreditorAddressId    string                 `protobuf:"bytes,4,opt,name=creditor_address_id,json=creditorAddressId,proto3" json:"creditor_address_id,omitempty"`
	CreditorAddressPass  string                 `protobuf:"bytes,5,opt,name=creditor_address_pass,json=creditorAddressPass,proto3" json:"creditor_address_pass,omitempty"`
	Signature            string                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PrepareToReplaceRequest) Reset() {
	*x = PrepareToReplaceRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareToReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareToReplaceRequest) ProtoMessage() {}

func (x *PrepareToReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareToReplaceRequest.ProtoReflect.Descriptor instead.
func (*PrepareToReplaceRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{16}
}

func (x *PrepareToReplaceRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *PrepareToReplaceRequest) GetDocumentHashReplaced() string {
	if x != nil {
		return x.DocumentHashReplaced
	}
	return ""
}

func (x *PrepareToReplaceRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *PrepareToReplaceRequest) GetCreditorAddressId() string {
	if x != nil {
		return x.CreditorAddressId
	}
	return ""
}

func (x *PrepareToReplaceRequest) GetCreditorAddressPass() string {
	if x != nil {
		return x.CreditorAddressPass
	}
	return ""
}

func (x *PrepareToReplaceRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type PrepareToReplaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareToReplaceResponse) Reset() {
	*x = PrepareToReplaceResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareToReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareToReplaceResponse) ProtoMessage() {}

func (x *PrepareToReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareToReplaceResponse.ProtoReflect.Descriptor instead.
func (*PrepareToReplaceResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{17}
}

func (x *PrepareToReplaceResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PrepareToReplaceResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type ReplaceRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash         string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	DocumentHashReplaced string                 `protobuf:"bytes,2,opt,name=document_hash_replaced,json=documentHashReplaced,proto3" json:"document_hash_replaced,omitempty"`
	OwnerAddressId       string                 `protobuf:"bytes,3,opt,name=owner_address_id,json=ownerAddressId,proto3" json:"owner_address_id,omitempty"`
	OwnerAddressPass     string                 `protobuf:"bytes,4,opt,name=owner_address_pass,json=ownerAddressPass,proto3" json:"owner_address_pass,omitempty"`
	Signature            string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ReplaceRequest) Reset() {
	*x = ReplaceRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRequest) ProtoMessage() {}

func (x *ReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRequest.ProtoReflect.Descriptor instead.
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{18}
}

func (x *ReplaceRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *ReplaceRequest) GetDocumentHashReplaced() string {
	if x != nil {
		return x.DocumentHashReplaced
	}
	return ""
}

func (x *ReplaceRequest) GetOwnerAddressId() string {
	if x != nil {
		return x.OwnerAddressId
	}
	return ""
}

func (x *ReplaceRequest) GetOwnerAddressPass() string {
	if x != nil {
		return x.OwnerAddressPass
	}
	return ""
}

func (x *ReplaceRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type ReplaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceResponse) Reset() {
	*x = ReplaceResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceResponse) ProtoMessage() {}

func (x *ReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceResponse.ProtoReflect.Descriptor instead.
func (*ReplaceResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{19}
}

func (x *ReplaceResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReplaceResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type RevertReplacementRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DocumentHash         string                 `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	DocumentHashReplaced string                 `protobuf:"bytes,2,opt,name=document_hash_replaced,json=documentHashReplaced,proto3" json:"document_hash_replaced,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RevertReplacementRequest) Reset() {
	*x = RevertReplacementRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertReplacementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertReplacementRequest) ProtoMessage() {}

func (x *RevertReplacementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertReplacementRequest.ProtoReflect.Descriptor instead.
func (*RevertReplacementRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{20}
}

func (x *RevertReplacementRequest) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *RevertReplacementRequest) GetDocumentHashReplaced() string {
	if x != nil {
		return x.DocumentHashReplaced
	}
	return ""
}

type RevertReplacementResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertReplacementResponse) Reset() {
	*x = RevertReplacementResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertReplacementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertReplacementResponse) ProtoMessage() {}

func (x *RevertReplacementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertReplacementResponse.ProtoReflect.Descriptor instead.
func (*RevertReplacementResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{21}
}

func (x *RevertReplacementResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RevertReplacementResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type AddAddressRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressId     string                 `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAddressRoleRequest) Reset() {
	*x = AddAddressRoleRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAddressRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAddressRoleRequest) ProtoMessage() {}

func (x *AddAddressRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAddressRoleRequest.ProtoReflect.Descriptor instead.
func (*AddAddressRoleRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{22}
}

func (x *AddAddressRoleRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *AddAddressRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AddAddressRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Token         *Token                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAddressRoleResponse) Reset() {
	*x = AddAddressRoleResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAddressRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAddressRoleResponse) ProtoMessage() {}

func (x *AddAddressRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAddressRoleResponse.ProtoReflect.Descriptor instead.
func (*AddAddressRoleResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{23}
}

func (x *AddAddressRoleResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddAddressRoleResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type TransactionInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionInfoRequest) Reset() {
	*x = TransactionInfoRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfoRequest) ProtoMessage() {}

func (x *TransactionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfoRequest.ProtoReflect.Descriptor instead.
func (*TransactionInfoRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{24}
}

func (x *TransactionInfoRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type TransactionInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Transaction   *v1.Transaction        `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionInfoResponse) Reset() {
	*x = TransactionInfoResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfoResponse) ProtoMessage() {}

func (x *TransactionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfoResponse.ProtoReflect.Descriptor instead.
func (*TransactionInfoResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionInfoResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransactionInfoResponse) GetTransaction() *v1.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type PauseContractRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseContractRequest) Reset() {
	*x = PauseContractRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseContractRequest) ProtoMessage() {}

func (x *PauseContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseContractRequest.ProtoReflect.Descriptor instead.
func (*PauseContractRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{26}
}

type PauseContractResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Transaction   *v1.Transaction        `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseContractResponse) Reset() {
	*x = PauseContractResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseContractResponse) ProtoMessage() {}

func (x *PauseContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseContractResponse.ProtoReflect.Descriptor instead.
func (*PauseContractResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{27}
}

func (x *PauseContractResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PauseContractResponse) GetTransaction() *v1.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type ResumeContractRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeContractRequest) Reset() {
	*x = ResumeContractRequest{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeContractRequest) ProtoMessage() {}

func (x *ResumeContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeContractRequest.ProtoReflect.Descriptor instead.
func (*ResumeContractRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{28}
}

type ResumeContractResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Transaction   *v1.Transaction        `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeContractResponse) Reset() {
	*x = ResumeContractResponse{}
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeContractResponse) ProtoMessage() {}

func (x *ResumeContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_token_v1_token_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeContractResponse.ProtoReflect.Descriptor instead.
func (*ResumeContractResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_token_v1_token_api_proto_rawDescGZIP(), []int{29}
}

func (x *ResumeContractResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ResumeContractResponse) GetTransaction() *v1.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

var File_blockchain_token_v1_token_api_proto protoreflect.FileDescriptor

var file_blockchain_token_v1_token_api_proto_rawDesc = []byte{
	0x0a, 0x23, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x7c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a,
	0x02, 0x0a, 0x0f, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x22, 0x76, 0x0a, 0x10, 0x45,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xba, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x22, 0x76, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcf, 0x02, 0x0a, 0x19, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcc, 0x02,
	0x0a, 0x19, 0x42, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x1a, 0x42, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xed, 0x01, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22,
	0x8a, 0x01, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfc, 0x01, 0x0a,
	0x26, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x27,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x1a,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x17, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7e, 0x0a,
	0x18, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x75, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x22,
	0x7f, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4a, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x7c, 0x0a, 0x16,
	0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a,
	0x14, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xab, 0x0d, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x69, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x75, 0x0a, 0x12, 0x42, 0x75, 0x79, 0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79,
	0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79,
	0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x38, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x12, 0x3b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a,
	0x11, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x9e, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x31, 0x2f,
	0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42,
	0x54, 0x58, 0xaa, 0x02, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blockchain_token_v1_token_api_proto_rawDescOnce sync.Once
	file_blockchain_token_v1_token_api_proto_rawDescData = file_blockchain_token_v1_token_api_proto_rawDesc
)

func file_blockchain_token_v1_token_api_proto_rawDescGZIP() []byte {
	file_blockchain_token_v1_token_api_proto_rawDescOnce.Do(func() {
		file_blockchain_token_v1_token_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockchain_token_v1_token_api_proto_rawDescData)
	})
	return file_blockchain_token_v1_token_api_proto_rawDescData
}

var file_blockchain_token_v1_token_api_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_blockchain_token_v1_token_api_proto_goTypes = []any{
	(*CreateContractRequest)(nil),                   // 0: blockchain.token.v1.CreateContractRequest
	(*CreateContractResponse)(nil),                  // 1: blockchain.token.v1.CreateContractResponse
	(*EmissionRequest)(nil),                         // 2: blockchain.token.v1.EmissionRequest
	(*EmissionResponse)(nil),                        // 3: blockchain.token.v1.EmissionResponse
	(*TransferRequest)(nil),                         // 4: blockchain.token.v1.TransferRequest
	(*TransferResponse)(nil),                        // 5: blockchain.token.v1.TransferResponse
	(*TransferToCreditorRequest)(nil),               // 6: blockchain.token.v1.TransferToCreditorRequest
	(*TransferToCreditorResponse)(nil),              // 7: blockchain.token.v1.TransferToCreditorResponse
	(*BuyoutFromCreditorRequest)(nil),               // 8: blockchain.token.v1.BuyoutFromCreditorRequest
	(*BuyoutFromCreditorResponse)(nil),              // 9: blockchain.token.v1.BuyoutFromCreditorResponse
	(*TransferFromOwnerToWarehouseRequest)(nil),     // 10: blockchain.token.v1.TransferFromOwnerToWarehouseRequest
	(*TransferFromOwnerToWarehouseResponse)(nil),    // 11: blockchain.token.v1.TransferFromOwnerToWarehouseResponse
	(*TransferFromCreditorToWarehouseRequest)(nil),  // 12: blockchain.token.v1.TransferFromCreditorToWarehouseRequest
	(*TransferFromCreditorToWarehouseResponse)(nil), // 13: blockchain.token.v1.TransferFromCreditorToWarehouseResponse
	(*InitiateReplacementRequest)(nil),              // 14: blockchain.token.v1.InitiateReplacementRequest
	(*InitiateReplacementResponse)(nil),             // 15: blockchain.token.v1.InitiateReplacementResponse
	(*PrepareToReplaceRequest)(nil),                 // 16: blockchain.token.v1.PrepareToReplaceRequest
	(*PrepareToReplaceResponse)(nil),                // 17: blockchain.token.v1.PrepareToReplaceResponse
	(*ReplaceRequest)(nil),                          // 18: blockchain.token.v1.ReplaceRequest
	(*ReplaceResponse)(nil),                         // 19: blockchain.token.v1.ReplaceResponse
	(*RevertReplacementRequest)(nil),                // 20: blockchain.token.v1.RevertReplacementRequest
	(*RevertReplacementResponse)(nil),               // 21: blockchain.token.v1.RevertReplacementResponse
	(*AddAddressRoleRequest)(nil),                   // 22: blockchain.token.v1.AddAddressRoleRequest
	(*AddAddressRoleResponse)(nil),                  // 23: blockchain.token.v1.AddAddressRoleResponse
	(*TransactionInfoRequest)(nil),                  // 24: blockchain.token.v1.TransactionInfoRequest
	(*TransactionInfoResponse)(nil),                 // 25: blockchain.token.v1.TransactionInfoResponse
	(*PauseContractRequest)(nil),                    // 26: blockchain.token.v1.PauseContractRequest
	(*PauseContractResponse)(nil),                   // 27: blockchain.token.v1.PauseContractResponse
	(*ResumeContractRequest)(nil),                   // 28: blockchain.token.v1.ResumeContractRequest
	(*ResumeContractResponse)(nil),                  // 29: blockchain.token.v1.ResumeContractResponse
	(*v1.Error)(nil),                                // 30: blockchain.types.v1.Error
	(*Token)(nil),                                   // 31: blockchain.token.v1.Token
	(*v1.Transaction)(nil),                          // 32: blockchain.types.v1.Transaction
}
var file_blockchain_token_v1_token_api_proto_depIdxs = []int32{
	30, // 0: blockchain.token.v1.CreateContractResponse.error:type_name -> blockchain.types.v1.Error
	31, // 1: blockchain.token.v1.CreateContractResponse.token:type_name -> blockchain.token.v1.Token
	30, // 2: blockchain.token.v1.EmissionResponse.error:type_name -> blockchain.types.v1.Error
	31, // 3: blockchain.token.v1.EmissionResponse.token:type_name -> blockchain.token.v1.Token
	30, // 4: blockchain.token.v1.TransferResponse.error:type_name -> blockchain.types.v1.Error
	31, // 5: blockchain.token.v1.TransferResponse.token:type_name -> blockchain.token.v1.Token
	30, // 6: blockchain.token.v1.TransferToCreditorResponse.error:type_name -> blockchain.types.v1.Error
	31, // 7: blockchain.token.v1.TransferToCreditorResponse.token:type_name -> blockchain.token.v1.Token
	30, // 8: blockchain.token.v1.BuyoutFromCreditorResponse.error:type_name -> blockchain.types.v1.Error
	31, // 9: blockchain.token.v1.BuyoutFromCreditorResponse.token:type_name -> blockchain.token.v1.Token
	30, // 10: blockchain.token.v1.TransferFromOwnerToWarehouseResponse.error:type_name -> blockchain.types.v1.Error
	31, // 11: blockchain.token.v1.TransferFromOwnerToWarehouseResponse.token:type_name -> blockchain.token.v1.Token
	30, // 12: blockchain.token.v1.TransferFromCreditorToWarehouseResponse.error:type_name -> blockchain.types.v1.Error
	31, // 13: blockchain.token.v1.TransferFromCreditorToWarehouseResponse.token:type_name -> blockchain.token.v1.Token
	30, // 14: blockchain.token.v1.InitiateReplacementResponse.error:type_name -> blockchain.types.v1.Error
	31, // 15: blockchain.token.v1.InitiateReplacementResponse.token:type_name -> blockchain.token.v1.Token
	30, // 16: blockchain.token.v1.PrepareToReplaceResponse.error:type_name -> blockchain.types.v1.Error
	31, // 17: blockchain.token.v1.PrepareToReplaceResponse.token:type_name -> blockchain.token.v1.Token
	30, // 18: blockchain.token.v1.ReplaceResponse.error:type_name -> blockchain.types.v1.Error
	31, // 19: blockchain.token.v1.ReplaceResponse.token:type_name -> blockchain.token.v1.Token
	30, // 20: blockchain.token.v1.RevertReplacementResponse.error:type_name -> blockchain.types.v1.Error
	31, // 21: blockchain.token.v1.RevertReplacementResponse.token:type_name -> blockchain.token.v1.Token
	30, // 22: blockchain.token.v1.AddAddressRoleResponse.error:type_name -> blockchain.types.v1.Error
	31, // 23: blockchain.token.v1.AddAddressRoleResponse.token:type_name -> blockchain.token.v1.Token
	30, // 24: blockchain.token.v1.TransactionInfoResponse.error:type_name -> blockchain.types.v1.Error
	32, // 25: blockchain.token.v1.TransactionInfoResponse.transaction:type_name -> blockchain.types.v1.Transaction
	30, // 26: blockchain.token.v1.PauseContractResponse.error:type_name -> blockchain.types.v1.Error
	32, // 27: blockchain.token.v1.PauseContractResponse.transaction:type_name -> blockchain.types.v1.Transaction
	30, // 28: blockchain.token.v1.ResumeContractResponse.error:type_name -> blockchain.types.v1.Error
	32, // 29: blockchain.token.v1.ResumeContractResponse.transaction:type_name -> blockchain.types.v1.Transaction
	0,  // 30: blockchain.token.v1.TokenAPI.CreateContract:input_type -> blockchain.token.v1.CreateContractRequest
	2,  // 31: blockchain.token.v1.TokenAPI.Emission:input_type -> blockchain.token.v1.EmissionRequest
	4,  // 32: blockchain.token.v1.TokenAPI.Transfer:input_type -> blockchain.token.v1.TransferRequest
	6,  // 33: blockchain.token.v1.TokenAPI.TransferToCreditor:input_type -> blockchain.token.v1.TransferToCreditorRequest
	8,  // 34: blockchain.token.v1.TokenAPI.BuyoutFromCreditor:input_type -> blockchain.token.v1.BuyoutFromCreditorRequest
	10, // 35: blockchain.token.v1.TokenAPI.TransferFromOwnerToWarehouse:input_type -> blockchain.token.v1.TransferFromOwnerToWarehouseRequest
	12, // 36: blockchain.token.v1.TokenAPI.TransferFromCreditorToWarehouse:input_type -> blockchain.token.v1.TransferFromCreditorToWarehouseRequest
	14, // 37: blockchain.token.v1.TokenAPI.InitiateReplacement:input_type -> blockchain.token.v1.InitiateReplacementRequest
	16, // 38: blockchain.token.v1.TokenAPI.PrepareToReplace:input_type -> blockchain.token.v1.PrepareToReplaceRequest
	18, // 39: blockchain.token.v1.TokenAPI.Replace:input_type -> blockchain.token.v1.ReplaceRequest
	20, // 40: blockchain.token.v1.TokenAPI.RevertReplacement:input_type -> blockchain.token.v1.RevertReplacementRequest
	24, // 41: blockchain.token.v1.TokenAPI.TransactionInfo:input_type -> blockchain.token.v1.TransactionInfoRequest
	22, // 42: blockchain.token.v1.TokenAPI.AddAddressRole:input_type -> blockchain.token.v1.AddAddressRoleRequest
	26, // 43: blockchain.token.v1.TokenAPI.PauseContract:input_type -> blockchain.token.v1.PauseContractRequest
	28, // 44: blockchain.token.v1.TokenAPI.ResumeContract:input_type -> blockchain.token.v1.ResumeContractRequest
	1,  // 45: blockchain.token.v1.TokenAPI.CreateContract:output_type -> blockchain.token.v1.CreateContractResponse
	3,  // 46: blockchain.token.v1.TokenAPI.Emission:output_type -> blockchain.token.v1.EmissionResponse
	5,  // 47: blockchain.token.v1.TokenAPI.Transfer:output_type -> blockchain.token.v1.TransferResponse
	7,  // 48: blockchain.token.v1.TokenAPI.TransferToCreditor:output_type -> blockchain.token.v1.TransferToCreditorResponse
	9,  // 49: blockchain.token.v1.TokenAPI.BuyoutFromCreditor:output_type -> blockchain.token.v1.BuyoutFromCreditorResponse
	11, // 50: blockchain.token.v1.TokenAPI.TransferFromOwnerToWarehouse:output_type -> blockchain.token.v1.TransferFromOwnerToWarehouseResponse
	13, // 51: blockchain.token.v1.TokenAPI.TransferFromCreditorToWarehouse:output_type -> blockchain.token.v1.TransferFromCreditorToWarehouseResponse
	15, // 52: blockchain.token.v1.TokenAPI.InitiateReplacement:output_type -> blockchain.token.v1.InitiateReplacementResponse
	17, // 53: blockchain.token.v1.TokenAPI.PrepareToReplace:output_type -> blockchain.token.v1.PrepareToReplaceResponse
	19, // 54: blockchain.token.v1.TokenAPI.Replace:output_type -> blockchain.token.v1.ReplaceResponse
	21, // 55: blockchain.token.v1.TokenAPI.RevertReplacement:output_type -> blockchain.token.v1.RevertReplacementResponse
	25, // 56: blockchain.token.v1.TokenAPI.TransactionInfo:output_type -> blockchain.token.v1.TransactionInfoResponse
	23, // 57: blockchain.token.v1.TokenAPI.AddAddressRole:output_type -> blockchain.token.v1.AddAddressRoleResponse
	27, // 58: blockchain.token.v1.TokenAPI.PauseContract:output_type -> blockchain.token.v1.PauseContractResponse
	29, // 59: blockchain.token.v1.TokenAPI.ResumeContract:output_type -> blockchain.token.v1.ResumeContractResponse
	45, // [45:60] is the sub-list for method output_type
	30, // [30:45] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_blockchain_token_v1_token_api_proto_init() }
func file_blockchain_token_v1_token_api_proto_init() {
	if File_blockchain_token_v1_token_api_proto != nil {
		return
	}
	file_blockchain_token_v1_token_proto_init()
	file_blockchain_token_v1_token_api_proto_msgTypes[2].OneofWrappers = []any{}
	file_blockchain_token_v1_token_api_proto_msgTypes[4].OneofWrappers = []any{}
	file_blockchain_token_v1_token_api_proto_msgTypes[6].OneofWrappers = []any{}
	file_blockchain_token_v1_token_api_proto_msgTypes[8].OneofWrappers = []any{}
	file_blockchain_token_v1_token_api_proto_msgTypes[10].OneofWrappers = []any{}
	file_blockchain_token_v1_token_api_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockchain_token_v1_token_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockchain_token_v1_token_api_proto_goTypes,
		DependencyIndexes: file_blockchain_token_v1_token_api_proto_depIdxs,
		MessageInfos:      file_blockchain_token_v1_token_api_proto_msgTypes,
	}.Build()
	File_blockchain_token_v1_token_api_proto = out.File
	file_blockchain_token_v1_token_api_proto_rawDesc = nil
	file_blockchain_token_v1_token_api_proto_goTypes = nil
	file_blockchain_token_v1_token_api_proto_depIdxs = nil
}
