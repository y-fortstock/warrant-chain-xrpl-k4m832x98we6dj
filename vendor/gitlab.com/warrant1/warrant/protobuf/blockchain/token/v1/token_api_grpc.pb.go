// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blockchain/token/v1/token_api.proto

package tokenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenAPI_CreateContract_FullMethodName                  = "/blockchain.token.v1.TokenAPI/CreateContract"
	TokenAPI_Emission_FullMethodName                        = "/blockchain.token.v1.TokenAPI/Emission"
	TokenAPI_Transfer_FullMethodName                        = "/blockchain.token.v1.TokenAPI/Transfer"
	TokenAPI_TransferToCreditor_FullMethodName              = "/blockchain.token.v1.TokenAPI/TransferToCreditor"
	TokenAPI_BuyoutFromCreditor_FullMethodName              = "/blockchain.token.v1.TokenAPI/BuyoutFromCreditor"
	TokenAPI_TransferFromOwnerToWarehouse_FullMethodName    = "/blockchain.token.v1.TokenAPI/TransferFromOwnerToWarehouse"
	TokenAPI_TransferFromCreditorToWarehouse_FullMethodName = "/blockchain.token.v1.TokenAPI/TransferFromCreditorToWarehouse"
	TokenAPI_InitiateReplacement_FullMethodName             = "/blockchain.token.v1.TokenAPI/InitiateReplacement"
	TokenAPI_PrepareToReplace_FullMethodName                = "/blockchain.token.v1.TokenAPI/PrepareToReplace"
	TokenAPI_Replace_FullMethodName                         = "/blockchain.token.v1.TokenAPI/Replace"
	TokenAPI_RevertReplacement_FullMethodName               = "/blockchain.token.v1.TokenAPI/RevertReplacement"
	TokenAPI_TransactionInfo_FullMethodName                 = "/blockchain.token.v1.TokenAPI/TransactionInfo"
	TokenAPI_AddAddressRole_FullMethodName                  = "/blockchain.token.v1.TokenAPI/AddAddressRole"
	TokenAPI_PauseContract_FullMethodName                   = "/blockchain.token.v1.TokenAPI/PauseContract"
	TokenAPI_ResumeContract_FullMethodName                  = "/blockchain.token.v1.TokenAPI/ResumeContract"
)

// TokenAPIClient is the client API for TokenAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenAPIClient interface {
	// Create smart-contract.
	CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*CreateContractResponse, error)
	// Emission token.
	Emission(ctx context.Context, in *EmissionRequest, opts ...grpc.CallOption) (*EmissionResponse, error)
	// Transfer token.
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// TransferToCreditor transfer warrant from owner to creditor.
	TransferToCreditor(ctx context.Context, in *TransferToCreditorRequest, opts ...grpc.CallOption) (*TransferToCreditorResponse, error)
	// BuyoutFromCreditor transfer warrant from creditor to owner.
	BuyoutFromCreditor(ctx context.Context, in *BuyoutFromCreditorRequest, opts ...grpc.CallOption) (*BuyoutFromCreditorResponse, error)
	// TransferFromOwnerToWarehouse redeem token, transfer it from owner to warehouse.
	TransferFromOwnerToWarehouse(ctx context.Context, in *TransferFromOwnerToWarehouseRequest, opts ...grpc.CallOption) (*TransferFromOwnerToWarehouseResponse, error)
	// TransferFromCreditorToWarehouse redeem token, transfer it from creditor to warehouse.
	TransferFromCreditorToWarehouse(ctx context.Context, in *TransferFromCreditorToWarehouseRequest, opts ...grpc.CallOption) (*TransferFromCreditorToWarehouseResponse, error)
	// Initiate replacement.
	InitiateReplacement(ctx context.Context, in *InitiateReplacementRequest, opts ...grpc.CallOption) (*InitiateReplacementResponse, error)
	// Prepare to replace.
	PrepareToReplace(ctx context.Context, in *PrepareToReplaceRequest, opts ...grpc.CallOption) (*PrepareToReplaceResponse, error)
	// Replace.
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
	// Revert.
	RevertReplacement(ctx context.Context, in *RevertReplacementRequest, opts ...grpc.CallOption) (*RevertReplacementResponse, error)
	// Transaction info.
	TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (*TransactionInfoResponse, error)
	// Set address role.
	AddAddressRole(ctx context.Context, in *AddAddressRoleRequest, opts ...grpc.CallOption) (*AddAddressRoleResponse, error)
	// Pause contract.
	PauseContract(ctx context.Context, in *PauseContractRequest, opts ...grpc.CallOption) (*PauseContractResponse, error)
	// Resume contract.
	ResumeContract(ctx context.Context, in *ResumeContractRequest, opts ...grpc.CallOption) (*ResumeContractResponse, error)
}

type tokenAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenAPIClient(cc grpc.ClientConnInterface) TokenAPIClient {
	return &tokenAPIClient{cc}
}

func (c *tokenAPIClient) CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*CreateContractResponse, error) {
	out := new(CreateContractResponse)
	err := c.cc.Invoke(ctx, TokenAPI_CreateContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) Emission(ctx context.Context, in *EmissionRequest, opts ...grpc.CallOption) (*EmissionResponse, error) {
	out := new(EmissionResponse)
	err := c.cc.Invoke(ctx, TokenAPI_Emission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, TokenAPI_Transfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) TransferToCreditor(ctx context.Context, in *TransferToCreditorRequest, opts ...grpc.CallOption) (*TransferToCreditorResponse, error) {
	out := new(TransferToCreditorResponse)
	err := c.cc.Invoke(ctx, TokenAPI_TransferToCreditor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) BuyoutFromCreditor(ctx context.Context, in *BuyoutFromCreditorRequest, opts ...grpc.CallOption) (*BuyoutFromCreditorResponse, error) {
	out := new(BuyoutFromCreditorResponse)
	err := c.cc.Invoke(ctx, TokenAPI_BuyoutFromCreditor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) TransferFromOwnerToWarehouse(ctx context.Context, in *TransferFromOwnerToWarehouseRequest, opts ...grpc.CallOption) (*TransferFromOwnerToWarehouseResponse, error) {
	out := new(TransferFromOwnerToWarehouseResponse)
	err := c.cc.Invoke(ctx, TokenAPI_TransferFromOwnerToWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) TransferFromCreditorToWarehouse(ctx context.Context, in *TransferFromCreditorToWarehouseRequest, opts ...grpc.CallOption) (*TransferFromCreditorToWarehouseResponse, error) {
	out := new(TransferFromCreditorToWarehouseResponse)
	err := c.cc.Invoke(ctx, TokenAPI_TransferFromCreditorToWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) InitiateReplacement(ctx context.Context, in *InitiateReplacementRequest, opts ...grpc.CallOption) (*InitiateReplacementResponse, error) {
	out := new(InitiateReplacementResponse)
	err := c.cc.Invoke(ctx, TokenAPI_InitiateReplacement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) PrepareToReplace(ctx context.Context, in *PrepareToReplaceRequest, opts ...grpc.CallOption) (*PrepareToReplaceResponse, error) {
	out := new(PrepareToReplaceResponse)
	err := c.cc.Invoke(ctx, TokenAPI_PrepareToReplace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := c.cc.Invoke(ctx, TokenAPI_Replace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) RevertReplacement(ctx context.Context, in *RevertReplacementRequest, opts ...grpc.CallOption) (*RevertReplacementResponse, error) {
	out := new(RevertReplacementResponse)
	err := c.cc.Invoke(ctx, TokenAPI_RevertReplacement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (*TransactionInfoResponse, error) {
	out := new(TransactionInfoResponse)
	err := c.cc.Invoke(ctx, TokenAPI_TransactionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) AddAddressRole(ctx context.Context, in *AddAddressRoleRequest, opts ...grpc.CallOption) (*AddAddressRoleResponse, error) {
	out := new(AddAddressRoleResponse)
	err := c.cc.Invoke(ctx, TokenAPI_AddAddressRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) PauseContract(ctx context.Context, in *PauseContractRequest, opts ...grpc.CallOption) (*PauseContractResponse, error) {
	out := new(PauseContractResponse)
	err := c.cc.Invoke(ctx, TokenAPI_PauseContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenAPIClient) ResumeContract(ctx context.Context, in *ResumeContractRequest, opts ...grpc.CallOption) (*ResumeContractResponse, error) {
	out := new(ResumeContractResponse)
	err := c.cc.Invoke(ctx, TokenAPI_ResumeContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenAPIServer is the server API for TokenAPI service.
// All implementations must embed UnimplementedTokenAPIServer
// for forward compatibility
type TokenAPIServer interface {
	// Create smart-contract.
	CreateContract(context.Context, *CreateContractRequest) (*CreateContractResponse, error)
	// Emission token.
	Emission(context.Context, *EmissionRequest) (*EmissionResponse, error)
	// Transfer token.
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// TransferToCreditor transfer warrant from owner to creditor.
	TransferToCreditor(context.Context, *TransferToCreditorRequest) (*TransferToCreditorResponse, error)
	// BuyoutFromCreditor transfer warrant from creditor to owner.
	BuyoutFromCreditor(context.Context, *BuyoutFromCreditorRequest) (*BuyoutFromCreditorResponse, error)
	// TransferFromOwnerToWarehouse redeem token, transfer it from owner to warehouse.
	TransferFromOwnerToWarehouse(context.Context, *TransferFromOwnerToWarehouseRequest) (*TransferFromOwnerToWarehouseResponse, error)
	// TransferFromCreditorToWarehouse redeem token, transfer it from creditor to warehouse.
	TransferFromCreditorToWarehouse(context.Context, *TransferFromCreditorToWarehouseRequest) (*TransferFromCreditorToWarehouseResponse, error)
	// Initiate replacement.
	InitiateReplacement(context.Context, *InitiateReplacementRequest) (*InitiateReplacementResponse, error)
	// Prepare to replace.
	PrepareToReplace(context.Context, *PrepareToReplaceRequest) (*PrepareToReplaceResponse, error)
	// Replace.
	Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
	// Revert.
	RevertReplacement(context.Context, *RevertReplacementRequest) (*RevertReplacementResponse, error)
	// Transaction info.
	TransactionInfo(context.Context, *TransactionInfoRequest) (*TransactionInfoResponse, error)
	// Set address role.
	AddAddressRole(context.Context, *AddAddressRoleRequest) (*AddAddressRoleResponse, error)
	// Pause contract.
	PauseContract(context.Context, *PauseContractRequest) (*PauseContractResponse, error)
	// Resume contract.
	ResumeContract(context.Context, *ResumeContractRequest) (*ResumeContractResponse, error)
	mustEmbedUnimplementedTokenAPIServer()
}

// UnimplementedTokenAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTokenAPIServer struct {
}

func (UnimplementedTokenAPIServer) CreateContract(context.Context, *CreateContractRequest) (*CreateContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedTokenAPIServer) Emission(context.Context, *EmissionRequest) (*EmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emission not implemented")
}
func (UnimplementedTokenAPIServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedTokenAPIServer) TransferToCreditor(context.Context, *TransferToCreditorRequest) (*TransferToCreditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToCreditor not implemented")
}
func (UnimplementedTokenAPIServer) BuyoutFromCreditor(context.Context, *BuyoutFromCreditorRequest) (*BuyoutFromCreditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyoutFromCreditor not implemented")
}
func (UnimplementedTokenAPIServer) TransferFromOwnerToWarehouse(context.Context, *TransferFromOwnerToWarehouseRequest) (*TransferFromOwnerToWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFromOwnerToWarehouse not implemented")
}
func (UnimplementedTokenAPIServer) TransferFromCreditorToWarehouse(context.Context, *TransferFromCreditorToWarehouseRequest) (*TransferFromCreditorToWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFromCreditorToWarehouse not implemented")
}
func (UnimplementedTokenAPIServer) InitiateReplacement(context.Context, *InitiateReplacementRequest) (*InitiateReplacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateReplacement not implemented")
}
func (UnimplementedTokenAPIServer) PrepareToReplace(context.Context, *PrepareToReplaceRequest) (*PrepareToReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareToReplace not implemented")
}
func (UnimplementedTokenAPIServer) Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedTokenAPIServer) RevertReplacement(context.Context, *RevertReplacementRequest) (*RevertReplacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertReplacement not implemented")
}
func (UnimplementedTokenAPIServer) TransactionInfo(context.Context, *TransactionInfoRequest) (*TransactionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInfo not implemented")
}
func (UnimplementedTokenAPIServer) AddAddressRole(context.Context, *AddAddressRoleRequest) (*AddAddressRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddressRole not implemented")
}
func (UnimplementedTokenAPIServer) PauseContract(context.Context, *PauseContractRequest) (*PauseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseContract not implemented")
}
func (UnimplementedTokenAPIServer) ResumeContract(context.Context, *ResumeContractRequest) (*ResumeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeContract not implemented")
}
func (UnimplementedTokenAPIServer) mustEmbedUnimplementedTokenAPIServer() {}

// UnsafeTokenAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenAPIServer will
// result in compilation errors.
type UnsafeTokenAPIServer interface {
	mustEmbedUnimplementedTokenAPIServer()
}

func RegisterTokenAPIServer(s grpc.ServiceRegistrar, srv TokenAPIServer) {
	s.RegisterService(&TokenAPI_ServiceDesc, srv)
}

func _TokenAPI_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_CreateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).CreateContract(ctx, req.(*CreateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_Emission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).Emission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_Emission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).Emission(ctx, req.(*EmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_TransferToCreditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferToCreditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).TransferToCreditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_TransferToCreditor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).TransferToCreditor(ctx, req.(*TransferToCreditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_BuyoutFromCreditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyoutFromCreditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).BuyoutFromCreditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_BuyoutFromCreditor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).BuyoutFromCreditor(ctx, req.(*BuyoutFromCreditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_TransferFromOwnerToWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFromOwnerToWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).TransferFromOwnerToWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_TransferFromOwnerToWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).TransferFromOwnerToWarehouse(ctx, req.(*TransferFromOwnerToWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_TransferFromCreditorToWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFromCreditorToWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).TransferFromCreditorToWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_TransferFromCreditorToWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).TransferFromCreditorToWarehouse(ctx, req.(*TransferFromCreditorToWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_InitiateReplacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).InitiateReplacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_InitiateReplacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).InitiateReplacement(ctx, req.(*InitiateReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_PrepareToReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareToReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).PrepareToReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_PrepareToReplace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).PrepareToReplace(ctx, req.(*PrepareToReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_RevertReplacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).RevertReplacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_RevertReplacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).RevertReplacement(ctx, req.(*RevertReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_TransactionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).TransactionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_TransactionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).TransactionInfo(ctx, req.(*TransactionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_AddAddressRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).AddAddressRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_AddAddressRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).AddAddressRole(ctx, req.(*AddAddressRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_PauseContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).PauseContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_PauseContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).PauseContract(ctx, req.(*PauseContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenAPI_ResumeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAPIServer).ResumeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenAPI_ResumeContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAPIServer).ResumeContract(ctx, req.(*ResumeContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenAPI_ServiceDesc is the grpc.ServiceDesc for TokenAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.token.v1.TokenAPI",
	HandlerType: (*TokenAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContract",
			Handler:    _TokenAPI_CreateContract_Handler,
		},
		{
			MethodName: "Emission",
			Handler:    _TokenAPI_Emission_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _TokenAPI_Transfer_Handler,
		},
		{
			MethodName: "TransferToCreditor",
			Handler:    _TokenAPI_TransferToCreditor_Handler,
		},
		{
			MethodName: "BuyoutFromCreditor",
			Handler:    _TokenAPI_BuyoutFromCreditor_Handler,
		},
		{
			MethodName: "TransferFromOwnerToWarehouse",
			Handler:    _TokenAPI_TransferFromOwnerToWarehouse_Handler,
		},
		{
			MethodName: "TransferFromCreditorToWarehouse",
			Handler:    _TokenAPI_TransferFromCreditorToWarehouse_Handler,
		},
		{
			MethodName: "InitiateReplacement",
			Handler:    _TokenAPI_InitiateReplacement_Handler,
		},
		{
			MethodName: "PrepareToReplace",
			Handler:    _TokenAPI_PrepareToReplace_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _TokenAPI_Replace_Handler,
		},
		{
			MethodName: "RevertReplacement",
			Handler:    _TokenAPI_RevertReplacement_Handler,
		},
		{
			MethodName: "TransactionInfo",
			Handler:    _TokenAPI_TransactionInfo_Handler,
		},
		{
			MethodName: "AddAddressRole",
			Handler:    _TokenAPI_AddAddressRole_Handler,
		},
		{
			MethodName: "PauseContract",
			Handler:    _TokenAPI_PauseContract_Handler,
		},
		{
			MethodName: "ResumeContract",
			Handler:    _TokenAPI_ResumeContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain/token/v1/token_api.proto",
}
